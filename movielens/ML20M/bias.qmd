---
title: Bias on ML20M
echo: false
deps:
- sweeps/temporal/Bias-grid
---

```{python}
import json
from pathlib import Path
import pandas as pd
import numpy as np
import plotnine as pn
import matplotlib.pyplot as plt
```

```{python}
from codex.reporting.plots import DEFAULTS
```

```{python}
sweep_dir = Path('sweeps/temporal')
model_name = 'Bias'
```

## Grid Search Results

```{python}
with open(sweep_dir / f'{model_name}-grid' / 'runs.json', 'rt') as jsf:
    run_data = [json.loads(line) for line in jsf]
grid_runs = pd.json_normalize(run_data)
```

```{python}
cfg_rmse = grid_runs.groupby(['params.user_damping', 'params.item_damping'])['metrics.RMSE'].mean().reset_index()
cfg_rmse = cfg_rmse.astype({'params.user_damping': 'str'})
(
    pn.ggplot(cfg_rmse)
    + pn.aes(x='params.item_damping', y='metrics.RMSE', color='params.user_damping', shape='params.user_damping')
    + pn.geom_line()
    + pn.ylab('Per-user RMSE')
    + pn.scale_color_brewer('qual', 'Dark2')
)
```

User damping will have no effect on rankings.

```{python}
cfg_topn = grid_runs.groupby(['params.item_damping'])[['metrics.RBP', 'metrics.NDCG', 'metrics.RecipRank']].mean().reset_index()
(
    pn.ggplot(cfg_topn)
    + pn.aes(x='params.item_damping', y='metrics.RBP')
    + pn.geom_line()
    + pn.ylab('Mean RBP')
)
```


```{python}
(
    pn.ggplot(cfg_topn)
    + pn.aes(x='params.item_damping', y='metrics.NDCG')
    + pn.geom_line()
    + pn.ylab('Mean NDCG')
)
```

```{python}
(
    pn.ggplot(cfg_topn)
    + pn.aes(x='params.item_damping', y='metrics.RecipRank')
    + pn.geom_line()
    + pn.ylab('Mean RecipRank')
)
```

## Random Search

```{python}
with open(sweep_dir / f'{model_name}-temporal' / 'runs.json', 'rt') as jsf:
    run_data = [json.loads(line) for line in jsf]
temporal_runs = pd.json_normalize(run_data)
```

What is the geometry of the search space?

```{python}
(
    pn.ggplot(temporal_runs)
    + pn.aes(x='params.user_damping', y='params.item_damping')
    + pn.geom_density_2d()
)
```

How does RMSE change with each setting independently?

```{python}
(
    pn.ggplot(temporal_runs)
    + pn.aes(x='params.user_damping', y='metrics.RMSE')
    + pn.geom_point()
    + pn.geom_smooth()
)
```

```{python}
(
    pn.ggplot(temporal_runs)
    + pn.aes(x='params.item_damping', y='metrics.RMSE')
    + pn.geom_point()
    + pn.geom_smooth(method='lm')
)
```

## Best Configurations

Best by RMSE:

```{python}
pd.concat({
    'Grid': grid_runs.nsmallest(1, 'metrics.RMSE')[['params.user_damping', 'params.item_damping', 'metrics.RBP', 'metrics.RMSE']],
    'Random': temporal_runs.nsmallest(1, 'metrics.RMSE')[['params.user_damping', 'params.item_damping', 'metrics.RBP', 'metrics.RMSE']],
}, names=['Method']).reset_index(-1, drop=True)
```

Best by RBP:

```{python}
pd.concat({
    'Grid': grid_runs.nlargest(1, 'metrics.RBP')[['params.user_damping', 'params.item_damping', 'metrics.RBP', 'metrics.RMSE']],
    'Random': temporal_runs.nlargest(1, 'metrics.RBP')[['params.user_damping', 'params.item_damping', 'metrics.RBP', 'metrics.RMSE']],
}, names=['Method']).reset_index(-1, drop=True)
```
