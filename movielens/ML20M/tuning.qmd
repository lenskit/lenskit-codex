---
title: Tuning Analysis
pagetitle: ML20M Tuning Analysis
jupyter: python3
---

This page provides an analysis of the hyperparameter sweeps on ML20M to get a
handle on how different tuning methods are performing, in order to select the
most efficient strategies for other data sets.

```{python}
import sys

from codex.reporting.prelude import *
```

## Loading the Data

First we will load _all_ the different tunings we have.

```{python}
names = ['model', 'search']
all_runs = {}
all_iters = {}
for model in DATA_INFO.models:
    for split in DATA_INFO.splits:
        for search in DATA_INFO.searches:
            try:
                all_runs[(model, search)] = load_sweep_runs(model, split=split, method=search)
                all_iters[(model,search)] = load_sweep_iters(model, split=split, method=search)
            except FileNotFoundError as e:
                print(e, file=sys.stderr)
runs = pd.concat({
    k: df[['trial_id', 'timestamp', 'RBP', 'NDCG']
          + (['RMSE'] if 'RMSE' in df.columns else [])]
    for k, df in all_runs.items()
}, names=names)
runs = runs.reset_index(names).reset_index(drop=True)
iters = pd.concat({
    k: df[['trial_id', 'training_iteration', 'timestamp', 'time_this_iter_s', 'RBP', 'NDCG']
          + (['RMSE'] if 'RMSE' in df.columns else [])]
    for k, df in all_iters.items()
}, names=names)
iters = iters.reset_index(names).reset_index(drop=True)
runs.info()
```
