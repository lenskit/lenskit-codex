---
title: ALS ImplicitMF on ML100K
echo: false
deps:
- sweeps/random/als-biased-random
---

This page analyzes the hyperparameter tuning results for implicit-feedback
matrix factorization with ALS.

```{python}
from codex.reporting.prelude import *
```

```{python}
runs = load_sweep_runs('als-implicit', method='hyperopt')
iters = load_sweep_iters('als-implicit', method='hyperopt')
result = load_sweep_result('als-implicit', method='hyperopt')
best_id = result['trial_id']
```

## Parameter Search Space

```{python}
from codex.models.als_biased import SEARCH_SPACE
show_param_space(SEARCH_SPACE)
```

## Final Result

Searching selected the following configuration:

```{python}
rich.print(result['config'])
```

With these metrics:

```{python}
rich.print(result)
```

## Iteration Completion

How many iterations, on average, did we complete?

```{python}
(
    pn.ggplot(runs)
    + pn.aes(x='training_iteration')
    + pn.geom_histogram(binwidth=1)
)
```

How did the metric progress in the best result?

```{python}
best_iters = iters[iters['trial_id'] == best_id]
(
    pn.ggplot(best_iters)
    + pn.aes(x='training_iteration', y='RBP')
    + pn.geom_line()
)
```

How did the metric progress in the longest results?

```{python}
max_iter = iters['training_iteration'].max()
last_results = iters[iters['training_iteration'] == max_iter]
full_trials = last_results['trial_id']
full_iters = iters[iters['trial_id'].isin(full_trials)]
(
    pn.ggplot(full_iters)
    + pn.aes(x='training_iteration', y='RBP', color='trial_id')
    + pn.geom_line()
)
```

## Optimization Performance

We want to assess how quickly the models optimize, to get a sense of how many
training attempts we need for larger data sets.

```{python}
id_cols = ['trial', 'trial_id', 'training_iteration', 'timestamp']
iter_perf = iters.sort_values('timestamp')[id_cols + ['RBP']]
iter_perf = iter_perf.rename(columns={'RBP': 'Current'})
iter_perf['order'] = np.arange(len(iter_perf))
iter_perf['Best'] = iter_perf['Current'].cummax()
```


```{python}
it_tall = iter_perf.melt(
    id_cols + ['order'],
    var_name='Period'
)
(
    pn.ggplot(it_tall)
    + pn.aes(x='order', y='value', color='Period')
    + pn.geom_line()
    + pn.ggtitle('Iteration Performance by Time')
)
```


```{python}
trial_perf = iter_perf.groupby(['trial', 'trial_id'])[['Current']].max().reset_index().sort_values('trial')
trial_perf['Best'] = trial_perf['Current'].cummax()
tp_tall = trial_perf.melt(
    ['trial', 'trial_id'],
    var_name='Period'
)
(
    pn.ggplot(tp_tall)
    + pn.aes(x='trial', y='value', color='Period')
    + pn.geom_line()
    + pn.ggtitle('Performance by Trial')
)
```
